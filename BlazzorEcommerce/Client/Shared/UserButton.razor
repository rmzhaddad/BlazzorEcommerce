@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ICartService CartService

<div class="dropdown">
    <button @onclick="ToggleUserMenu" 
            @onfocusout="HideUserMenu"
            class="btn btn-secondary dropdown-toggle user-button">
          <i class="oi oi-person"></i>
        </button>
        <div class="dropdown-menu dropdown-mene-right @UserMenuCssClass " >
            <AuthorizeView>
                <Authorized>
                <a href="profile" class="dropdown-item">Profile</a>
                <a href="orders" class="dropdown-item">Orders</a>
                <hr />
                <AdminMenu />
                <buton @onclick="Logout" class="dropdown-item">Logout</buton>
                </Authorized>
                <NotAuthorized>
                <a href="register" class="dropdown-item">Register</a>
                <a href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">Login</a>
                </NotAuthorized>
            </AuthorizeView>
            
        </div>
</div>

@code {
    private bool showUserMenu = false;
    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }
    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;
    }
    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await CartService.GetCartItemsCount();
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");
    }
}
